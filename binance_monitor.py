#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Binance Multi-Pair Trade Monitor
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –Ω–∞ Binance (spot –∏ futures)
"""

import asyncio
import json
import logging
import time
import os
from datetime import datetime
from typing import Dict, Set, List
from collections import defaultdict

import aiohttp
import websockets

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        from config import LOG_LEVEL, LOG_FILE
        log_level = getattr(logging, LOG_LEVEL.upper(), logging.INFO)
    except ImportError:
        log_level = logging.INFO
        LOG_FILE = 'binance_monitor.log'
    
    logging.basicConfig(
        level=log_level,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(LOG_FILE),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

logger = setup_logging()

class BinanceMultiMonitor:
    def __init__(self, telegram_token: str, min_amount: float = 100000):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–∞—Ä
        
        Args:
            telegram_token: –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
            min_amount: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –≤ USD –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        self.telegram_token = telegram_token
        self.min_amount = min_amount
        self.telegram_url = f"https://api.telegram.org/bot{telegram_token}"
        self.subscribed_users: Set[int] = set()
        self.subscribers_file = "subscribers.json"
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        from config import TRADING_PAIRS, ASSET_EMOJIS, NOTIFICATION_SETTINGS
        self.trading_pairs = TRADING_PAIRS
        self.asset_emojis = ASSET_EMOJIS
        self.notification_settings = NOTIFICATION_SETTINGS
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ä–∞–º
        self.stats = {
            'spot_trades': defaultdict(int),
            'futures_trades': defaultdict(int),
            'notifications_sent': 0,
            'start_time': time.time(),
            'total_trades': 0
        }
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notification_timestamps = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        self.load_subscribers()
        
    def load_subscribers(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.subscribers_file):
                with open(self.subscribers_file, 'r') as f:
                    data = json.load(f)
                    self.subscribed_users = set(data.get('subscribers', []))
                    logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.subscribed_users)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞")
            else:
                logger.info("üìÅ –§–∞–π–ª –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
    
    def save_subscribers(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            data = {
                'subscribers': list(self.subscribed_users),
                'last_updated': datetime.now().isoformat(),
                'total_count': len(self.subscribed_users)
            }
            with open(self.subscribers_file, 'w') as f:
                json.dump(data, f, indent=2)
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.subscribed_users)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ —Ñ–∞–π–ª")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
    
    def add_subscriber(self, user_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
        if user_id not in self.subscribed_users:
            self.subscribed_users.add(user_id)
            self.save_subscribers()
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_id}")
    
    def get_asset_emoji(self, symbol: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤ –∏–∑ —Å–∏–º–≤–æ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC –∏–∑ BTCUSDT)
        for asset, emoji in self.asset_emojis.items():
            if asset in symbol.upper():
                return emoji
        return "üí±"  # –≠–º–æ–¥–∑–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def can_send_notification(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        current_time = time.time()
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
        self.notification_timestamps = [ts for ts in self.notification_timestamps 
                                       if current_time - ts < 60]
        
        max_per_minute = self.notification_settings.get('max_notifications_per_minute', 10)
        return len(self.notification_timestamps) < max_per_minute
    
    async def test_telegram_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.telegram_url}/getMe") as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('ok'):
                            bot_info = data['result']
                            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ! –ë–æ—Ç: @{bot_info['username']}")
                            return True
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram: {e}")
            return False
    
    async def get_subscribed_users(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ –±–æ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –±–æ–ª—å—à–∏–º –ª–∏–º–∏—Ç–æ–º
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.telegram_url}/getUpdates?limit=1000&timeout=1") as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('ok'):
                            new_users = 0
                            for update in data.get('result', []):
                                if 'message' in update:
                                    user_id = update['message']['from']['id']
                                    if user_id not in self.subscribed_users:
                                        self.subscribed_users.add(user_id)
                                        new_users += 1
                            
                            if new_users > 0:
                                self.save_subscribers()
                                logger.info(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ {new_users} –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
                            
                            logger.info(f"üìä –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(self.subscribed_users)}")
                            
                            if not self.subscribed_users:
                                logger.warning("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –≤ Telegram")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
    
    async def update_subscribers_periodically(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        while True:
            try:
                await asyncio.sleep(300)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                await self.get_subscribed_users()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
    
    async def send_telegram_notification(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        if not self.subscribed_users:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return
        
        if not self.can_send_notification():
            logger.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É")
            return
        
        success_count = 0
        failed_users = []
        
        for user_id in self.subscribed_users:
            try:
                async with aiohttp.ClientSession() as session:
                    payload = {
                        'chat_id': user_id,
                        'text': message,
                        'parse_mode': 'HTML',
                        'disable_web_page_preview': True
                    }
                    async with session.post(f"{self.telegram_url}/sendMessage", json=payload) as response:
                        if response.status == 200:
                            success_count += 1
                        else:
                            response_text = await response.text()
                            if response.status == 403:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                                failed_users.append(user_id)
                            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {response.status}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if failed_users:
            for user_id in failed_users:
                self.subscribed_users.discard(user_id)
            self.save_subscribers()
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(failed_users)} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        if success_count > 0:
            self.stats['notifications_sent'] += success_count
            self.notification_timestamps.append(time.time())
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    
    def format_trade_message(self, trade_data: Dict, market_type: str, symbol: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ"""
        price = float(trade_data['p'])
        quantity = float(trade_data['q'])
        amount = price * quantity
        timestamp = datetime.fromtimestamp(trade_data['T'] / 1000).strftime('%Y-%m-%d %H:%M:%S')
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏ (–ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞)
        is_buyer_maker = trade_data.get('m', False)
        trade_type = "üü¢ –ü–û–ö–£–ü–ö–ê" if not is_buyer_maker else "üî¥ –ü–†–û–î–ê–ñ–ê"
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —Ä—ã–Ω–∫–∞ –∏ –∞–∫—Ç–∏–≤–∞
        market_emoji = "üí±" if market_type == "SPOT" else "üìà"
        asset_emoji = self.get_asset_emoji(symbol)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã
        if amount >= 1000000:
            amount_str = f"${amount/1000000:.2f}M"
        elif amount >= 1000:
            amount_str = f"${amount/1000:.1f}K"
        else:
            amount_str = f"${amount:,.0f}"
        
        message = f"""
{market_emoji} <b>{market_type} {symbol.upper()}</b> {asset_emoji}

{trade_type}
üí∞ –°—É–º–º–∞: <b>{amount_str}</b>
üíµ –¶–µ–Ω–∞: <b>${price:,.4f}</b>
üìä –û–±—ä—ë–º: <b>{quantity:.6f}</b>
‚è∞ –í—Ä–µ–º—è: <b>{timestamp}</b>

üîó <a href="https://www.binance.com/ru/trade/{symbol.upper()}">–û—Ç–∫—Ä—ã—Ç—å Binance</a>
        """.strip()
        
        return message
    
    async def handle_trade(self, message: str, market_type: str, symbol: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–¥–µ–ª–∫–∏"""
        try:
            trade_data = json.loads(message)
            price = float(trade_data['p'])
            quantity = float(trade_data['q'])
            amount = price * quantity
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats['total_trades'] += 1
            if market_type == "SPOT":
                self.stats['spot_trades'][symbol] += 1
            else:
                self.stats['futures_trades'][symbol] += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
            if amount >= self.min_amount:
                formatted_message = self.format_trade_message(trade_data, market_type, symbol)
                await self.send_telegram_notification(formatted_message)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–¥–µ–ª–∫–∏ {market_type} {symbol}: {e}")
    
    async def websocket_handler(self, symbol: str, market_type: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket –¥–ª—è –æ–¥–Ω–æ–π –ø–∞—Ä—ã"""
        if market_type == "SPOT":
            ws_url = f"wss://stream.binance.com:9443/ws/{symbol}@trade"
        else:
            ws_url = f"wss://fstream.binance.com/ws/{symbol}@trade"
        
        while True:
            try:
                async with websockets.connect(ws_url) as websocket:
                    logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {market_type} WebSocket –¥–ª—è {symbol.upper()}")
                    
                    async for message in websocket:
                        await self.handle_trade(message, market_type, symbol)
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ {market_type} WebSocket –¥–ª—è {symbol}: {e}")
                await asyncio.sleep(5)
    
    async def print_stats(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            from config import STATS_INTERVAL
            interval = STATS_INTERVAL
        except ImportError:
            interval = 60
        
        while True:
            await asyncio.sleep(interval)
            runtime = time.time() - self.stats['start_time']
            
            # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–∏—Ö —Å–¥–µ–ª–æ–∫
            total_spot = sum(self.stats['spot_trades'].values())
            total_futures = sum(self.stats['futures_trades'].values())
            
            logger.info(f"""
=== üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {runtime:.0f} —Å–µ–∫
üí± –í—Å–µ–≥–æ SPOT —Å–¥–µ–ª–æ–∫: {total_spot}
üìà –í—Å–µ–≥–æ FUTURES —Å–¥–µ–ª–æ–∫: {total_futures}
üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.stats['notifications_sent']}
üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(self.subscribed_users)}
üí∞ –ü–æ—Ä–æ–≥ —Å—É–º–º—ã: ${self.min_amount:,.0f}
üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞—Ä: {len(self.trading_pairs)}
==================
            """)
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Multi-Pair Binance Monitor (–ø–æ—Ä–æ–≥: ${self.min_amount:,.0f})")
        logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {len(self.trading_pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
        if not await self.test_telegram_connection():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        await self.get_subscribed_users()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
        tasks = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–ø–æ—Ç–∞
        if self.notification_settings.get('enable_spot', True):
            for symbol in self.trading_pairs:
                tasks.append(self.websocket_handler(symbol, "SPOT"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
        if self.notification_settings.get('enable_futures', True):
            for symbol in self.trading_pairs:
                tasks.append(self.websocket_handler(symbol, "FUTURES"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        tasks.append(self.print_stats())
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        tasks.append(self.update_subscribers_periodically())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        await asyncio.gather(*tasks)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        from config import TELEGRAM_TOKEN, MIN_AMOUNT
    except ImportError:
        logger.error("‚ùå –§–∞–π–ª config.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if TELEGRAM_TOKEN == "YOUR_TELEGRAM_BOT_TOKEN":
        logger.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –≤ config.py")
        return
    
    monitor = BinanceMultiMonitor(TELEGRAM_TOKEN, MIN_AMOUNT)
    
    try:
        await monitor.run()
    except KeyboardInterrupt:
        logger.info("üëã –ú–æ–Ω–∏—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 